#!/usr/bin/python3
"""
Sends a request to the specified server in order to download the specified
file.
"""

from os import path, chdir, mkdir
from lib.cli_parse import parse_args_download
from lib.socket_tcp import Socket
from lib.logger import logger
import lib.protocol as prt


def create_dir(dirpath: str) -> bool:
    option = None
    while option not in ['y', 'n']:
        option = input(f"Directory '{dirpath}/' not found. "
                       + "Do you want to create it? (y/n): ").lower()
    if option == 'n':
        return False
    return True


def navigate_to_dirpath(filepath: str) -> str:
    paths = filepath.split('/')
    subdirs = paths[:-1]
    dirpath = '/'.join(subdirs)
    filepath = paths[-1]

    # if dirname not exists, ask user if we should create it
    if not path.isdir(dirpath):
        if not create_dir(dirpath):
            return None

    # create subdirs
    for subdir in subdirs:
        if not path.isdir(subdir):
            mkdir(subdir)
        chdir(subdir)

    return filepath


def main(args):
    logger.setLevel(args.level)

    filepath = navigate_to_dirpath(args.FILEPATH)
    if filepath is None:
        return 0

    skt = Socket()
    skt.connect(args.ADDR, args.PORT)

    prt.send_opcode(skt, prt.DOWNLOAD_FILE_OP)
    s = prt.recv_status(skt)
    if s:
        raise RuntimeError(prt.get_error_msg(s))

    prt.send_filename(skt, args.FILENAME)
    s = prt.recv_status(skt)
    if s:
        raise RuntimeError(prt.get_error_msg(s))

    logger.info("Downloading file...")

    with open(filepath, 'wb') as f:
        for file_chunk in prt.recv_file(skt, True):
            f.write(file_chunk)

    logger.info("File downloaded.")

    return 0


if __name__ == "__main__":
    args = parse_args_download()
    try:
        main(args)
    except BaseException as e:
        logger.fatal(e)
        exit(1)
